#include "stm32f10x.h"
#include "systick.h"
#include "beep.h"
#include "usart.h"
#include "rfid125k.h"

uint8_t bitin;
uint32_t count;

#define RFID_DATA_Pin GPIO_Pin_0
#define RFID_DATA_Port GPIOA

uint8_t readbit(void)       //检测数据位子程序
{
    uint16_t delay_period = 1000; 
    uint32_t th, tl;

//    // 为 TIM2 赋初值，并启动计数
//    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
//    TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
//    TIM_TimeBaseStructure.TIM_Prescaler = (SystemCoreClock / 1000000) - 1; // 1us per count
//    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
//    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
//    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
//    TIM_Cmd(TIM2, ENABLE);
    
    TIM_SetCounter(TIM3,0);
    //使能计数器
    TIM_Cmd(TIM3,ENABLE);

    count = delay_period;

    // 循环扫描解码输入端状态，若跳变，则说明有数据输入
    // 若无跳变，说明超时
    while(--count)
    {
        if (bitin != GPIO_ReadInputDataBit(RFID_DATA_Port, RFID_DATA_Pin))
            break;
    }

    // 停止 TIM2 计时器
    TIM_Cmd(TIM3, DISABLE);

    // 超时，无数据位
    if(count==0) return 0;

    // 保存引脚状态
    bitin = GPIO_ReadInputDataBit(RFID_DATA_Port, RFID_DATA_Pin);

    // 计算跳变的脉宽
    th = TIM_GetCounter(TIM3) / 256;
    tl = TIM_GetCounter(TIM3) % 256;
    count = th * 256 + tl;

    // 脉宽位261-550us，为一个曼切斯特编码周期
    if((count > delay_period*5.2) && (count <= delay_period*11)) return 1;

    // 脉宽位50-260us，为半个曼切斯特编码周期
    else if((count >= delay_period) && (count <= delay_period*5.2))
        return 2;

    else return 0; // 出错
}

int main(void)
{
    SystemCoreClockUpdate();
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);

    RFID_CLK_Init();
    
    uint8_t CheckData(void);
    uint8_t readdata(void);

    while(1)
    {
        //Usart_SendByte()
        readbit();
        readdata();
        CheckData();

    }
}


uint8_t readdata(void)      //读取数据位子程序
{
    uint8_t result = readbit();
    if(result == 1)
    {
        // 脉宽位261-550us，为一周期
        return !bitin;
    }
    else if(result == 2)
    {
        // 脉宽位50-260us，为半个周期
        if(readbit()==0)
            return 2;
        else
            return !bitin;
    }
    else
    {
        // 出错
        return 2;
    }
    return 0;
}


uint8_t CheckData(void)      //读取数据位子程序
{
    uint32_t i,j;
    uint8_t RFID_buff[56] = {0}; // 定义并初始化RFID_buff数组

    bitin = GPIO_ReadInputDataBit(RFID_DATA_Port, RFID_DATA_Pin);//保存位状态

    for(i=0; i<9; i++)  //检测起始位
        if(readdata()!=1)
            return 0;

    for(i=0; i<11; i++)  //读取55个数据位
    {
        for(j=0; j<5; j++)  // 读取5bit数据（4有效+1偶校验）
        {
            RFID_buff[i] = RFID_buff[i] << 1;
            
            switch(readdata())
            {
            case 0:    //bit 0
                break;
            case 1:     //bit 1
                RFID_buff[i]|=0x08;
            case 2:
                return 0;
            }
        }
    }
    
    if(RFID_buff[10]&0x08!=0x00)   return 0;//判断结束位是否为0
    for(i=0;i<10;i++)       //行校验
    {
        if((((RFID_buff[i]>>4)^(RFID_buff[i]>>2)^(RFID_buff[i]>>1)^RFID_buff[i])&0x08)!=0)
            return 0;   //错误返回
    }
    //列校验
    j=0;
    for(i=0;i<11;i++)       //第一列偶校验
        j=j^(RFID_buff[i]&0x08);
     for(i=0;i<11;i++)       //第二列偶校验
        j=j^(RFID_buff[i]&0x40);
     for(i=0;i<11;i++)       //第三列偶校验
        j=j^(RFID_buff[i]&0x20);
     for(i=0;i<11;i++)       //第四列偶校验
        j=j^(RFID_buff[i]&0x10);
    if(j!=0)    return 0;
    else return 1;  //数据接收成果，返回1
}

